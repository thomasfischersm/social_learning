import 'package:flutter/material.dart';
import 'package:social_learning/state/course_designer_state.dart';
import 'package:social_learning/ui_foundation/helper_widgets/course_designer/inventory/inventory_entry.dart';
import 'package:social_learning/ui_foundation/helper_widgets/dialog_utils.dart';
import 'package:social_learning/ui_foundation/ui_constants/custom_ui_constants.dart';

class AddNewCategoryEntry extends InventoryEntry {
  final Future<void> Function(String name) onAdd;
  final Future<void> Function() onGenerate;
  final CourseDesignerState state;

  final TextEditingController controller = TextEditingController();
  final FocusNode focusNode = FocusNode();

  AddNewCategoryEntry({
    required this.onAdd,
    required this.onGenerate,
    required this.state,
  });

  @override
  String get pageKey => 'newCategory';

  @override
  Widget buildWidget(
      BuildContext context, VoidCallback refresh, CourseDesignerState _, int __) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: controller,
              focusNode: focusNode,
              decoration: CustomUiConstants.getFilledInputDecoration(
                context,
                labelText: 'Add new category...',
                enabledColor: Colors.grey.shade400,
              ),
              onSubmitted: (text) async {
                final trimmed = text.trim();
                if (trimmed.isEmpty) return;

                final duplicate = state
                    .categories
                    .any((c) =>
                        c.name.toLowerCase().trim() == trimmed.toLowerCase());

                if (duplicate) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                        content: Text('A category with that name already exists.')),
                  );
                  return;
                }

                controller.clear();
                final currentFocus = focusNode;
                await onAdd(trimmed);
                Future.delayed(const Duration(milliseconds: 100), () {
                  if (!currentFocus.hasFocus) {
                    FocusScope.of(context).requestFocus(currentFocus);
                  }
                });
                refresh();
              },
            ),
          ),
          const SizedBox(width: 8),
          ElevatedButton.icon(
            icon: const Icon(Icons.auto_fix_high),
            label: const Text('AI'),
            onPressed: () => _onAIPressed(context),
          ),
        ],
      ),
    );
  }

  Future<void> _onAIPressed(BuildContext context) async {
    final hasCategories = state.categories.isNotEmpty;
    final hasItems = state.items.isNotEmpty;

    if (hasCategories || hasItems) {
      await DialogUtils.showInfoDialog(
        context,
        'AI inventory generation',
        'This AI function can only be used for an empty course.\n\nDelete your existing categories or teachable items to proceed.',
        () {},
      );
    } else {
      await DialogUtils.showConfirmationDialog(
        context,
        'AI inventory generation',
        'Your categories and teachable items will be autoâ€‘generated by AI.',
        () async {
          await onGenerate();
        },
      );
    }
  }
}
